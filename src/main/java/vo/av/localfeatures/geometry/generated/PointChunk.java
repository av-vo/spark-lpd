// automatically generated by the FlatBuffers compiler, do not modify

package vo.av.localfeatures.geometry.generated;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PointChunk extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static PointChunk getRootAsPointChunk(ByteBuffer _bb) { return getRootAsPointChunk(_bb, new PointChunk()); }
  public static PointChunk getRootAsPointChunk(ByteBuffer _bb, PointChunk obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PointChunk __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DblTuple3 offset() { return offset(new DblTuple3()); }
  public DblTuple3 offset(DblTuple3 obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public DblTuple3 scale() { return scale(new DblTuple3()); }
  public DblTuple3 scale(DblTuple3 obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public IntTuple3 points(int j) { return points(new IntTuple3(), j); }
  public IntTuple3 points(IntTuple3 obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 12, bb) : null; }
  public int pointsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntTuple3.Vector pointsVector() { return pointsVector(new IntTuple3.Vector()); }
  public IntTuple3.Vector pointsVector(IntTuple3.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 12, bb) : null; }

  public static void startPointChunk(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addOffset(FlatBufferBuilder builder, int offsetOffset) { builder.addStruct(0, offsetOffset, 0); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addStruct(1, scaleOffset, 0); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(2, pointsOffset, 0); }
  public static void startPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(12, numElems, 4); }
  public static int endPointChunk(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPointChunkBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedPointChunkBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PointChunk get(int j) { return get(new PointChunk(), j); }
    public PointChunk get(PointChunk obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

